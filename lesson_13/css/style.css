.wrapper{
	overflow: hidden;
	min-height: 100%;
	position: relative;
}
body{
	background-color: #333;
}

/*
CSS – переходи чи CSS – transitions можуть застосовуватися 
всім елементам і навіть до псевдоэлементам. Використовуються 
для пожвавлення нашої верстки. 
Що, у свою чергу, призводить до поліпшення взаємодії з користувачем,
як правило шляхом приємної анімованої реакції на його дії. 
Наприклад – наведення та натискання на кнопку.
Також властивості transition можна використовувати для 
побудови нескладних сценаріїв анімації. Фактично,
CSS – переходи забезпечують зміну значень інших властивостей 
із певною анімацією та сценарієм.
*/
.page{
	padding: 20px;
}
.page__block{
	margin-bottom: 50px;
}

.block {
}
.block__item {
	width: 150px;
	height: 150px;
	background-color: #7A956B;
	
	/* 1000ms = 1s */

	/*
	transition-duration
	Визначає проміжок часу, 
	протягом якого має здійснюватись перехід. 
	Власне - тут ми вказуємо час за яке 
	одне значення якості переходить (анімується)
	в інше. Властивість не успадковується.
	*/
	transition-duration: 0.5s;
	/*
	Містить назву CSS-властивостей,
	до яких буде використано ефект переходу. 
	Значення властивості може містити як одну 
	властивість, так і список властивостей 
	через кому. Властивість не успадковується.
	*/
	transition-property: all;

	/*
	transition-delay
	Затримка виконання переходу. Дозволяє зробити 
	так, щоб зміна якості відбувалася не миттєво,
	а з деякою затримкою. Час затримки переходу 
	вказується у секундах або мілісекундах. 
	Властивість не успадковується.
	*/
	transition-delay: 0.5s;

	/*
	transition-timing-function
	Задає стиль нашого переходу,
	тобто якийсь сценарій,
	за яким здійсняться анімація.
	*/
	transition-timing-function: ease;


	/*
	Універсальний запис
	transition
	*/
	transition: all 0.5s ease 0.5s;
	
	/* Декілька параметрів */
	/* transition: width 0.8s ease 0s, height 0.5s ease-in 0.8s; */
}
.block:hover .block__item{
	width:200px;
	transform: translate(10%, 10%);
	background-color: #77608d;
	height:200px;
}
.link{
	color: #fff;
	transition: all 0.3s ease 0s;
	position: relative;
	padding-left: 25px;
}
.link::before{
	content: "";
	width: 15px;
	height: 15px;
	position: absolute;
	left: 0;
	top: 0;
	background-color: #7A956B;
	animation-name: link-rotate;
	animation-duration: 2s;
	animation-iteration-count: infinite;
	animation-timing-function: linear;
}

@keyframes link-rotate {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(360deg);
	}
}


.link::after{
	content: "";
	position: absolute;
	bottom: 0;
	width: 0%;
	left: 0;
	height: 1px;
	transition: width 0.3s ease 0s;
	background-color: red;
}
.link:hover{
	color: green;
	
}
.link:hover::before{
	animation-play-state: paused;
}
.link:hover::after{
	width: 100%;
}

.image{
	width: 200px;
	overflow: hidden;
	display: block;
	position: relative;
}
.image::before{
	content: "";
	position: absolute;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	opacity: 0.2;
	background-color: #000;
	transition: opacity 0.8s ease 0s;
	z-index: 2; 
}
.image img{
	max-width: 100%;
	transition: transform 0.8s ease 0s;
}
.image:hover img{
	transform: scale(1.1);
}
.image:hover::before {
	opacity: 0;
}
.page__text {
	color: #fff;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
}

/* ============================================================ */

/*
CSS animation & @keyframes

Як і CSS властивість плавних переходів transition,
про яку ми говорили в попередньому уроці,
властивість animation покликана зробити нашу верстку динамічнішою,
оживити її для кращої взаємодії з 
користувачем та створення WOW ефекту. 

Але на відміну від CSS переходів,
створення анімації базується на ключових кадрах @keyframes,
які дозволяють автоматично відтворювати та повторювати 
ефекти протягом заданого часу, а також зупиняти 
анімацію за певною подією. 

Іншими словами, використання конструкції animation 
та @keyframes дозволяє нам створювати більш складні сценарії анімацій.
*/

.block-animation {}
.block-animation__item {
	width: 150px;
	height: 150px;
	background-color: #77608d;

	/*
	animation-name
	Визначає список анімацій (ключових кадрів),
	що застосовуються до елемента. Можна вказати через кому. 
	Причому пріоритет останній запис.
	*/
	animation-name: rotate-block;

	/*
	animation-duration
	Відповідає за тривалість анімації.
	*/
	animation-duration: 1s;

	/*
	animation-timing-function
	Встановлює сценарій розвитку анімації між ключовими кадрами.
	*/
	animation-timing-function: linear;

	/*
	animation-iteration-count
	Відповідає за повтор відтворення ключових кадрів.
	*/
	animation-iteration-count: 1;

	/*
	animation-direction
	Визначає напрямок та тип відтворення ключових кадрів.

	normal - за замовченням
	*/
	animation-direction: normal;
	/*
	animation-play-state
	Дозволяє запускати або зупиняти анімацію за подією.
	*/
	animation-play-state:running;

	/*
	animation-delay
	Відповідає за затримку перед відтворенням.
	*/
	animation-delay: 0s;

	/*
	animation-fill-mode
	Визначає,
	які значення анімованих css властивостей 
	застосовуються до об'єкта після завершення анімації.
	*/
	animation-fill-mode: forwards;


	/*
	Універсальний запис
	animation
	*/
	animation: rotate-block 1s linear 1 normal running 0s forwards;

}

.block-animation__item:hover{
	animation-play-state: paused;
}

/* Сценарій анімації */
@keyframes rotate-block {
	0% {
		transform: translate(0,0);
	}
	100% {
		transform: translate(200px, 0);
	}
}
/*
.car {
	width: 200px;
	height: 100px;
	background-color: #794f45;
	border-radius: 50px 50px 0 0;
	position: relative;
	animation: car-ride 8s linear forwards;
}
.car__wheels {
	position: absolute;
	bottom: 20px;
	width: 100%;
	left: 0;
}
.car__wheel {
	width: 40px;
	height: 40px;
	background-color: #666;
	position: absolute;
	border-radius: 50%;
	outline: 5px dashed #000;
	animation: wheels 8s linear forwards;
}
.car__wheel:first-child{
	left: 0;
}
.car__wheel:last-child {
	right: 0;
}
*/
/*
@keyframes wheels{
	0% {
		transform: rotate(0deg);
	}
	20%{
		transform: rotate(360deg);
	}
	80%{
		transform: rotate(360deg);
	}
	100%{
		transform: rotate(0deg);
	}
}
@keyframes car-ride {
	0% {
		transform: translate(-200%, 0px);
	}
	20%{
		transform: translate(100px, 0px);
	}
	80%{
		transform: translate(100px, 0px);
	}
	100% {
		transform: translate(1000px, 0px);
	}
}
*/

/*
.title {
	font-weight: 700;
	font-size: 40px;
	animation: title 1s ease forwards;
	transform: translate(0px, 50%);
	opacity: 0;
}

.title:not(:last-child){
	margin-bottom: 20px;
}
.sub-title {
	font-size: 24px;
	animation: title 1s ease 0.5s forwards;
	transform: translate(0px, 50%);
	opacity: 0;
}
.sub-title:not(:last-child) {
	margin-bottom: 15px;
}
.text {
	animation: title 1s ease 1s forwards;
	line-height: 1.5;
	transform: translate(0px, 50%);
	opacity: 0;
}

@keyframes title {
	0% {
	}
	100% {
		transform: translate(0px, 0%);
		opacity: 1;
	}
}
*/


.newton {
	width: 300px;
	margin: 0 auto;
	border-top: 10px solid #fff;
	position: relative;
	height: 300px;
}
.newton__item {
	position: absolute;
	top: -5px;
	width: 33.333%;
	height: 100%;
	transform-origin: top;
}
.newton__item::before {
	content:"";
	width: 4px;
	height: 100%;
	position: absolute;
	background-color: #666;
	left: 50%;
	transform: translate(-50%,0px);
	border-radius: 5px;
}
.newton__item::after{
	content: "";
	width:100px;
	height: 100px;
	border-radius: 50%;
	background-color: #000;
	position: absolute;
	bottom: 0;
	left: 0;
}

.newton__item:nth-child(1){
	left: 0;
	animation: left-item 1s infinite ease-in alternate;
	transform: rotate(45deg);
}
.newton__item:nth-child(2) {
	left: 33.333%;
}
.newton__item:nth-child(3) {
	right: 0;
	transform: translate(0px,0px);
	animation: right-item 1s infinite ease-out alternate;
}

@keyframes left-item {
	0%{
		transform: rotate(45deg);
	}
	50%{
		transform: rotate(0deg);
	}
	100%{
		transform: rotate(0deg);
	}
}
@keyframes right-item {
	0% {
		transform: rotate(0deg);
	}
	50% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(-45deg);
	}
}


.clouds {
	width: 300px;
	border-top: 5px solid #fff;
	margin: 0 auto;
	position: relative;
	height: 300px;
}
.clouds__item{
	position: absolute;
	top: 0;
	width: 33.333%;
	height: 100%;
	transform-origin: top;
}
.clouds__item::before {
	content: "";
	width: 4px;
	height: 100%;
	position: absolute;
	background-color: #666;
	left: 50%;
	transform: translate(-50%, 0px);
}
.clouds__item::after {
	content: "";
	width: 80px;
	height: 50px;
	background-color: #000;
	position: absolute;
	bottom: 0;
	left: 50%;
	transform: translate(-50%,0px);
}

.clouds__item:nth-child(1) {
	left: 0;
	animation:clouds 3s infinite ease-in-out alternate;
}

.clouds__item:nth-child(2) {
	left: 33.333%;
	animation: clouds 3.5s infinite ease-in-out alternate;
}
.clouds__item:nth-child(3) {
	right: 0;
	animation: clouds 2.8s infinite ease-in-out alternate;
}

@keyframes clouds {
	0% {
		transform: rotate(10deg);
	}
	100% {
		transform: rotate(-10deg);
	}
}